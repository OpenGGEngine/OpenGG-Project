@glsl define LIGHTNUM 100
@include stdfrag.ggsl

struct Light
{
    vec4 lightpos;
    vec4 color;
    vec4 dir;
    mat4 view;
    mat4 perspective;
	float lightdistance;
	float type;
	float shadow;
	float angle;
};

layout(std140) uniform LightBuffer {
	Light lights[LIGHTNUM];
};

uniform int numLights;
uniform int shadow;
uniform float nearplane;
uniform float farplane;

uniform sampler2D shadowmap;
uniform sampler2D shadowmap2;
uniform sampler2D shadowmap3;

uniform samplerCube shadowcube;
uniform samplerCube cube3;

float pointLight(Light light){
        vec3 sampleOffsetDirections[20] = vec3[]
        (
           vec3( 1,  1,  1), vec3( 1, -1,  1), vec3(-1, -1,  1), vec3(-1,  1,  1),
           vec3( 1,  1, -1), vec3( 1, -1, -1), vec3(-1, -1, -1), vec3(-1,  1, -1),
           vec3( 1,  1,  0), vec3( 1, -1,  0), vec3(-1, -1,  0), vec3(-1,  1,  0),
           vec3( 1,  0,  1), vec3(-1,  0,  1), vec3( 1,  0, -1), vec3(-1,  0, -1),
           vec3( 0,  1,  1), vec3( 0, -1,  1), vec3( 0, -1, -1), vec3( 0,  1, -1)
        );

        float viewDistance = length(camera - pos);
        vec3 fragToLight = pos - light.lightpos.xyz;
        float currentDepth = length(fragToLight)/light.lightdistance;

        float shadow = 0.0f;
        float normalBias   = 0.005f;
        float depthBias   = 0.0008f;
        int samples  = 20;

        float diskRadius = (1.0 + (viewDistance / light.lightdistance)) / 25.0;
        for(int i = 0; i < samples; i++)
        {
            float closestDepth = texture(shadowcube, fragToLight + (n * normalBias * abs(dot(n, fragToLight))) + sampleOffsetDirections[i] * diskRadius).r;
            if(currentDepth - depthBias > closestDepth)
                shadow += 1.0;
        }

        shadow = shadow / float(samples);
        return shadow;
}

float directionalLight(Light light){
    vec3 lightDir = vec3(1);
    if(light.type == 2.0f){
        lightDir = normalize(-light.dir.xyz);
    }else{
        lightDir = normalize(light.lightpos.xyz - pos.xyz);
    }

    float depthBias = max(0.008 * (1.0 - abs(dot(n, lightDir))), 0.0005f);

    vec4 lightspacePos = light.perspective*(light.view * vec4(pos, 1.0f));
    vec3 projCoords = lightspacePos.xyz/lightspacePos.w;
    projCoords = (projCoords * 0.5f) + 0.5f;

    float shadow = 0.0;
    vec2 texelSize = 1.0 / textureSize(shadowmap, 0);
    for(float x = -1.5; x < 1.6; x++){
        for(float y = -1.5; y < 1.6; y++){
                float pcfDepth = texture(shadowmap, projCoords.xy + vec2(x, y) * texelSize).r;
                shadow += projCoords.z - depthBias > pcfDepth ? 1.0 : 0.0;
            }
    }
    shadow /= 16.0;
    return shadow;
}

float LinearizeDepth(float depth)
{
    float z = depth * 2.0 - 1.0;
    return (2.0 * nearplane * farplane) / (farplane + nearplane - z * (farplane - nearplane));
}

float getShadowCoverage(Light light){
    if(light.shadow < 0.001f) return 1f;

    if(light.type == 1f){
        return pointLight(light);
    }else{
        return directionalLight(light);
    }
}