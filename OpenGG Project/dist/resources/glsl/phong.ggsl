@include material.ggsl
@include light.ggsl
@include stdfrag.ggsl

uniform float uvmultx;
uniform float uvmulty;
uniform vec3 camera;

float bloomMin = 0.9;
float vis = 1;
vec3 eyedir;


generatePhongData(){
    eyedir = normalize(camera - pos.xyz);
}

vec3 getPhongFrom(Light light){
    
	float distance = length( light.lightpos.xyz - pos.xyz );

	float attenuation =  (1.0 - (distance/light.lightdistance));
    	attenuation = attenuation * attenuation;

	vec3 lightDir = normalize(light.lightpos.xyz - pos.xyz);
	vec3 halfwayDir = normalize(lightDir + eyedir);

    float cosTheta = max(dot( n,lightDir ), 0.0f );
    vec3 fdif = diffuse * cosTheta;
	
    float cosAlpha = max(dot(n, halfwayDir), 0.0);
	vec3 fspec = specular * vec3(pow(cosAlpha, specpowvec.x), pow(cosAlpha, specpowvec.y), pow(cosAlpha, specpowvec.z));
	
    vec3 fragColor = (fdif + fspec) * attenuation * light.color.rgb;

    float shadowcover = 0;
    if(shadow != 0){
        shadowcover = getShadowCoverage(light);
    }

    return fragColor;
}


