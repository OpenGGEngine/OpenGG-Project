@include material.ggsl
@include light.ggsl
@include stdfrag.ggsl

uniform float uvmultx;
uniform float uvmulty;

float bloomMin = 0.9;
float vis = 1;
vec3 eyedir;


void generatePhongData(){
    eyedir = normalize(camera - pos.xyz);
}

vec3 getPhongFrom(Light light){
    float attenuation = 1.0f;

    vec3 lightDir = normalize(-light.dir.xyz);

	if(light.type == 2.0f){
	}else{
		float distance = length( light.lightpos.xyz - pos.xyz );
	    attenuation =  1.0f / (1.0f + (1.0f / light.lightdistance) * distance * distance);
	    lightDir = normalize(light.lightpos.xyz - pos.xyz);
	}

	vec3 halfwayDir = normalize(lightDir + eyedir);

    float cosTheta = max(dot( n,lightDir ), 0.0f );
    vec3 fdif = diffuse * cosTheta;
	
    float cosAlpha = max(dot(n, halfwayDir), 0.0);
	vec3 fspec = specular * pow(cosAlpha, specpow);

	float shadowcover = 1;
    if(shadow != 0){
        shadowcover = getShadowCoverage(light);
    }

    vec3 fragColor = (fdif + fspec) * attenuation * shadowcover * light.color.rgb;

    return fragColor;
}


