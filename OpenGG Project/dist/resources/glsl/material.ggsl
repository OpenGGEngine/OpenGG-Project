@fields
struct Material
{
    bool hasnormmap;
    bool hasspecmap;
    bool hasspecpow;
    bool hasambmap;
	bool hascolormap;
    vec3 ks;
    vec3 ka;
    vec3 kd;
    float ns;
};

uniform sampler2D Kd;
uniform sampler2D Ka;
uniform sampler2D Ks;
uniform sampler2D Ns;
uniform sampler2D bump;
uniform samplerCube cubemap;

vec3 n;
vec3 ambient;
vec3 specular;
vec3 diffuse;
vec4 color;
float specpow;
vec3 reflectedcolor;

@code
mat3 cotangent_frame( vec3 N, vec3 p, vec2 uv ){
    // get edge vectors of the pixel triangle
    vec3 dp1 = dFdx( p );
    vec3 dp2 = dFdy( p );
    vec2 duv1 = dFdx( uv );
    vec2 duv2 = dFdy( uv );

    // solve the linear system
    vec3 dp2perp = cross( dp2, N );
    vec3 dp1perp = cross( N, dp1 );
    vec3 T = dp2perp * duv1.x + dp1perp * duv2.x;
    vec3 B = dp2perp * duv1.y + dp1perp * duv2.y;

    // construct a scale-invariant frame
    float invmax = inversesqrt( max( dot(T,T), dot(B,B) ) );
    return mat3( T * invmax, B * invmax, N );
}

vec3 calculatenormal( vec3 N, vec3 V, vec3 map, vec2 texcoord){
    map = map * 255./127. - 128./127.;
    mat3 TBN = cotangent_frame( N, -V, texcoord);
    return normalize( TBN * map );
}

useMaterial(Material mat){
	//if(material.hascolormap){
		color = texture(Kd, textureCoord);
	//}else{
	//	color = vec4(material.kd, 1);
	//}

    diffuse = color.rgb;

    trans = color.a;

    ambient = 0.1f * diffuse;

    specular = vec3(1,1,1);

    specpow = 32;
    /*if(material.hasspecpow){
        vec4 specpowvec = getTex(Ns);
        specpow = specpowvec.r * 32;
    }else{
        specpow = material.ns;
    }*/

    if(mat.hasspecmap){
        specular = texture(Ks, textureCoord).rgb;
    }else{
        specular = material.ks;
    }

    if(mat.hasnormmap){
		n = calculatenormal(normalize((model * vec4(norm,0.0f)).xyz),
		 pos.xyz-camera, texture(bump, textureCoord).xyz, textureCoord);
    }else{
		n = normalize((model * vec4(norm,0.0f)).xyz);
	}

	//reflectedcolor = texture(cubemap, normalize(reflect(eyedir,n))).xyz;

}